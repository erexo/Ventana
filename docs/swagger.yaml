definitions:
  dto.Filters:
    properties:
      Column:
        type: string
      Count:
        type: integer
      Descending:
        type: boolean
      Offset:
        type: integer
    type: object
  dto.Light:
    properties:
      id:
        type: integer
      inputpin:
        type: integer
      name:
        type: string
      outputpin:
        type: integer
      position:
        type: boolean
    type: object
  dto.Point:
    properties:
      celsius:
        type: number
      timestamp:
        type: integer
    type: object
  dto.Sunblind:
    properties:
      id:
        type: integer
      inputdownpin:
        type: integer
      inputuppin:
        type: integer
      name:
        type: string
      outputdownpin:
        type: integer
      outputuppin:
        type: integer
    type: object
  dto.Thermometer:
    properties:
      celsius:
        type: number
      id:
        type: integer
      name:
        type: string
      sensor:
        type: string
    type: object
  dto.User:
    properties:
      id:
        type: integer
      role:
        type: integer
      username:
        type: string
    type: object
  light.saveDto:
    properties:
      inputpin:
        type: integer
      name:
        type: string
      outputpin:
        type: integer
    type: object
  sunblind.saveDto:
    properties:
      inputdownpin:
        type: integer
      inputuppin:
        type: integer
      name:
        type: string
      outputdownpin:
        type: integer
      outputuppin:
        type: integer
    type: object
  thermal.dataDto:
    properties:
      from:
        type: integer
      thermometerid:
        type: integer
      to:
        type: integer
    type: object
  thermal.saveDto:
    properties:
      name:
        type: string
      sensor:
        type: string
    type: object
  user.LoginInfo:
    properties:
      accessToken:
        type: string
      role:
        type: integer
    type: object
  user.createDto:
    properties:
      password:
        type: string
      role:
        type: integer
      username:
        type: string
    type: object
  user.loginDto:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  user.updatePasswordDto:
    properties:
      password:
        type: string
    type: object
  user.updateRoleDto:
    properties:
      role:
        type: integer
    type: object
info:
  contact: {}
paths:
  /api/light/browse:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Light'
            type: array
      security:
      - ApiKeyAuth: []
  /api/light/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/light.saveDto'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/light/delete/{id}:
    delete:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/light/order:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/light/toggle/{id}:
    post:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/light/update/{id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/light.saveDto'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.loginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginInfo'
  /api/sunblind/browse:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Sunblind'
            type: array
      security:
      - ApiKeyAuth: []
  /api/sunblind/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/sunblind.saveDto'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/sunblind/delete/{id}:
    delete:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/sunblind/order:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/sunblind/toggle/{id}/{dir}:
    post:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      - description: path
        in: path
        name: dir
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/sunblind/update/{id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/sunblind.saveDto'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/thermal/browse:
    post:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Thermometer'
            type: array
      security:
      - ApiKeyAuth: []
  /api/thermal/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/thermal.saveDto'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/thermal/data:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/thermal.dataDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Point'
            type: array
      security:
      - ApiKeyAuth: []
  /api/thermal/delete/{id}:
    delete:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/thermal/order:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/thermal/update/{id}:
    patch:
      consumes:
      - application/json
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/thermal.saveDto'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/user/browse:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.Filters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.User'
            type: array
      security:
      - ApiKeyAuth: []
  /api/user/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.createDto'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/user/delete/{id}:
    delete:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/user/update/password/{id}:
    patch:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.updatePasswordDto'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
  /api/user/update/role/{id}:
    patch:
      parameters:
      - description: path
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/user.updateRoleDto'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
